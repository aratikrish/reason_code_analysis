---
title: "GHSC-PSM TO3 Global Supply Chain reason code analysis"
subtitle: "FY2023 and FY2024Q1"
author: "Arati Krishnamoorthy"
format: pptx
editor: visual
execute: 
  output: false
---

```{r Purpose, Version and Learning}
# Purpose: Analysis of the use of reason codes by GHSC-PSM TO3 in FY2023 and FY2024Q1
# Author: Arati Krishnamoorthy
# Version Control:
# Feb 2024  Build off the oc.qmd script
# old learning:
#   use slice to remove rows
#   use janitor row_to_names to get column names from a row
#   use janitor remove_empty to remove rows that have all NAs
#   use relocate
#   use fill
#   negating the condition for a filter
#   use RcolorBrewer for ggplots
#   setting the theme for a ggplot
#   use forcats functions to set/change factor levels
#   casting a variable as a factor in order to change order on a stacked bar plot
#   using rep
#   use across to perform operations across multiple columns
#   use \(x) instead of ~.
#   use if_all and a function/condition with filter
#   change case_when default to .default =
#   use count(is.na(variable)) to count number of nas

```

```{r Initial Setup}

# load packages ------------------------------------------------
pacman::p_load("tidyverse",
               "rio",      # for import/export
               "janitor",  # for data cleaning
               "here",     # for relative file paths
               "ggplot2",
               "RColorBrewer"
            )


# For exploring character or factor columns, it is useful to have a see_distinct function -------------------------------------------------------------
see_distinct <- function(df, var){
  df |> 
    distinct({{ var }}) |> 
    arrange({{ var }}) |> 
    pull()
}

# Setting the theme for visualization -------------------------------------------------------------

color_title <- "#202020" #  "#000000"
color_caption <- "#909090"  # "#000000"
color_plot_text <- color_plot_text <- "#505050" # "#000000"
      
line <- 10
    
mytheme <- function() {
      theme_classic() +
        theme(plot.title = element_text(size = 20,
                                        color = color_title,
                                        face = "bold",
                                        margin = margin(b = line),
                                        hjust = 0),
              
              plot.title.position = "plot", #Move plot.title to the left
              
              plot.subtitle = element_text(size = 14,
                                           face = "italic",
                                           color = color_plot_text,
                                           hjust = 0), 
              
              plot.caption = element_text(size = 16,
                                          color = color_caption,
                                          face = "italic",
                                          margin = margin(t = line),
                                          hjust = 0, # left-align caption
                                          vjust = 1),
              
              plot.caption.position = "plot",
              
              plot.margin = ggplot2::margin(15, 15, 10, 15), #top, right, bottom, left
              
              axis.title = element_text(size = 16, # adjusts both axes titles
                                        color = color_plot_text),          
              axis.text.x = element_text(size = 12,
                                         angle = 60, 
                                         hjust = 1,
                                         color = color_plot_text),
              axis.text.y = element_text(size = 14,
                                         color = color_plot_text),
              
              axis.ticks = element_blank(),
              
              # axis.line = element_blank(),
              
              legend.position = "right",
              legend.title = element_blank(),
              legend.text = element_text(size = 14,
                                         color = color_plot_text)
              
              # text =  element_text(color = color_plot_text,
              # this will change all text size (except geom_text)
              #                          size = 14,
              #                          hjust = 0.5)
        )
      
    }




```

```{r PerformanceDS Import Data}

pds_raw <- import(here("data/raw_data", "PerformanceDataset.xlsx"),
                  na = c("", " ","NA"),
                  )

pds_importdate <- "Nov 2023"

#TO DO check why using import results in "" not being read as NAs
```

```{r PerformanceDS Data wrangling}

pds_raw |> glimpse()

# clean names
pds <- pds_raw |> 
  janitor::clean_names() |> 
  glimpse()

# This dataset is for all taskorders and all status. 
# Filter/select to chose only rows and columns of interest
pds <- pds |>
  filter(
    condom_adjusted_task_order == "TO3",
    (status_name   == "Shipment Delivered" |
     status_name == "Partially Delivered"
    ),
    order_type != "Replenishment Order",
    revised_agreed_delivery_date_fiscal_year %in% 
      c("2019","2020","2021","2022","2023","2024")
    # modify by converting to lubridate and using from to
  ) |>
  select(
    ropo_line,
    condom_adjusted_task_order,
    country,
    status_name,
    order_type,
    fulfillment_method,
    transportation_mode,
    ship_node,
    item_tracer_category,
    product_category,
    item_id,
    product_name,
    brand_name,
    uom,
    base_unit,
    base_unit_multiplier,
    estimated_lead_time_in_days,
    emergency_order,
    recipient_company,
    manufacturer_name,
    manufacture_country_country_of_origin,
    supplier,
    order_pick_up_country,
    unit_price,
    list_price,
    ordered_quantity,
    line_total,
    shipped_quantity,
    delivery_value,
    average_days_late,
    number_of_shipments,
    shipment_complete,
    line_delivery_status,
    agreed_delivery_date,
    revised_agreed_delivery_date,
    revised_agreed_delivery_date_fiscal_year,
    revised_agreed_delivery_date_fiscal_quarter_year,
    order_entry_date,
    requested_delivery_date,
    latest_actual_delivery_date,
    reason_code,
    reason_text,
    changed_field,
    reason_code_duration
    ) 

#TODO check fields

```

```{r GFPVAN Import Data}

# raw file has shipments for select countries for oral contraceptives
van_raw <- import(here("raw_data", "shipment.xlsx"),
                  na = c("", " ","NA"),
                  skip = 1
                  )

van_importdate <- "Nov 2023"

#TO DO check why using import results in "" not being read as NAs

```

```{r GFPVAN Data exploration, wrangling}

van_raw |> glimpse()
van_raw |> head(n=1)

# clean names
# can remove the first 11 rows
van <- van_raw |> 
  janitor::clean_names() |> 
  glimpse()

# select columns of interest
van <- van |> 
  select(country_name,
         supplier_description,
         shipment_status,
         shipment_line_status,
         estimated_ship_date,
         estimated_delivery_date,
         shipment_mode,
         ship_to_party_name,
         funder,
         procurer,
         program_recipient_description,
         product_description,
         shipped_qty,
         base_uom,
         manufacturer_description,
         l3_method,
         l5_product,
         source_uom,
         uom_value_factor,
         uom_qty_factor,
         estimated_unit_value_usd,
         data_provider,
         data_visibility,
         customer_type,
         program_recipient_id,
         delivered_date,
         received_date,
         delivered_qty,
         received_qty
         ) |> 
  glimpse()

van |> 
  distinct(l3_method, source_uom, uom_qty_factor, base_uom) 

van |> 
  mutate(across(.cols = where(is.POSIXct), .fns = as_date)) |> 
  glimpse()

# create a field that shows funder-recipient

van |> see_distinct(funder)

van <- van |> 
  mutate(funder = case_when((is.na(funder))|(funder=="TBD") 
                            ~ "Unknown",
                            .default = funder))
             
van |> see_distinct(program_recipient_description)
van |> see_distinct(program_recipient_id)
van <- van |>
  mutate(program_recipient_description = 
           str_replace(string = program_recipient_description,
           pattern = "unspecified",
           replacement = "Unspecified"))

van <- van |>
  mutate(program_recipient_description = 
           str_replace(string = program_recipient_description,
                       pattern = "Organisation",
                       replacement = "Organization"))

van <- van |> 
  mutate(program_recipient_description =
           case_when((str_detect(program_recipient_description,
                                "Unspecified non-governmental organization"))|
                       (str_detect(program_recipient_description,
                                   "Program Unspecified"))
                            ~ "Program Unspecified",#TODO change to using supply plan column but removing the words  "supply plan"
                            .default = program_recipient_description))

van <- van |>
  mutate(program_recipient_description = 
           str_replace(string = program_recipient_description,
                       pattern = "MoH",
                       replacement = "MOH"))


van <- van |>
  mutate(program_recipient_description = 
           str_replace(string = program_recipient_description,
                       pattern = "T-MARC",
                       replacement = "TMARC"))

van <- van |> 
  unite("funder_recipient", 
        funder, program_recipient_description, 
        remove=FALSE)

van |> see_distinct(funder_recipient)
van |> count(funder_recipient, sort = TRUE) |> pull(funder_recipient)

# convert funder_recipietn to factor and set levels per frequency
van <- van |> 
  mutate(funder_recipient = 
           factor(funder_recipient,
                  levels = c("Unknown_NA",
                              "Other_Ministry of Health (MOH)",
                                     "Other_Other United Nations Agency",
                                     "Other_Program Unspecified",
                                     "DKT_DKT",
                                     "DKT_NA",
                                     "Medical Export Group B.V. (MEG)_Medical Export Group B.V. (MEG)",
                                     "MSI_MSI Reproductive Choices",
                                     "Global Fund_Other United Nations Agency",
                                     "Global Fund_Program Unspecified",
                                     "Global Fund_Ministry of Health (MOH)",
                                     "IPPF_Benin Assoc. for Promotion of the Family (ABPF) [IPPF]",
                                     "IPPF_Burkina Association for Family Welfare (ABBEF) [IPPF]",
                                     "IPPF_Fianakaviana Sambatra (FISA) [IPPF]",
                                     "IPPF_Malian Association for Family Planning (AMPPF) [IPPF]",
                                     "IPPF_Planned Parenthood Association of Ghana (PPAG) [IPPF]",
                                     "IPPF_Planned Parenthood Association of Zambia (PPAZ) [IPPF]",
                                     "IPPF_Planned Parenthood Federation of Nigeria (PPFN) [IPPF]",
                                     "IPPF_Reproductive Health Uganda (RHU) [IPPF]",
                                     "IPPF_Togolese Association for Family Welfare (ATBEF) [IPPF]",
                                     "WAHO_Benin Association for Social Marketing (ABMS) [PSI]",
                                     "WAHO_NA",
                                     "WAHO_Program for Social Mktg. and Health Comm. (PROMACO)",
                                     "WAHO_Program Unspecified",
                                     "WAHO_Ministry of Health (MOH)",
                                     "UNFPA C.O. Co-Financing Agreement_Program Unspecified",
                                     "UNFPA Supplies_Program Unspecified",
                                     "USAID_Afghan Social Marketing Organization (ASMO)",
                                     "USAID_Agency for the Dev. of Social Mktg. (ADEMAS) [PSI]",
                                     "USAID_Benin Assoc. for Promotion of the Family (ABPF) [IPPF]",
                                     "USAID_Benin Association for Social Marketing (ABMS) [PSI]",
                                     "USAID_Burkina Association for Family Welfare (ABBEF) [IPPF]",
                                     "USAID_FHI360",
                                     "USAID_Health Keepers Network (HKN)",
                                     "USAID_Helping Mothers and Children Thrive (HEMAYAT) [Jhpiego]",
                                     "USAID_Joint Medical Store (JMS)",
                                     "USAID_Kampala Pharm",
                                     "USAID_Keneya Jemu Kan (KJK) [Johns Hopkins CCP]",
                                     "USAID_Marie Stopes Burkina Faso [MSI]",
                                     "USAID_Momentum [PSI]",
                                     "USAID_Momentum [PSI]/Jigi",
                                     "USAID_Office of U.S. Foreign Disaster Assistance (OFDA)",
                                     "USAID_Palladium",
                                     "USAID_Population Services International (PSI)",
                                     "USAID_Program for Social Mktg. and Health Comm. (PROMACO)",
                                     "USAID_Social Marketing Company (SMC)",
                                     "USAID_Society for Family Health (SFH) [PSI]",
                                     "USAID_Tanzania Marketing and Communication (TMARC)",
                                     "USAID_Togolese Association for Social Marketing (ATMS)",
                                     "USAID_Total Family Health Organization (TFHO)",
                                     "USAID_Uganda Health Marketing Group (UHMG)",
                                     "USAID_USAID DISCOVER Health Project [JSI]",
                                     "USAID_Program Unspecified",
                                     "USAID_Ministry of Health (MOH)"
                                     
                                   )))

levels(van$funder_recipient)

# check status
van |>  see_distinct(shipment_status)

# check and fill nas in delivered_date
van |> count(is.na(delivered_date)) 

van <- van |>
  mutate(delivered_date_calc = coalesce(delivered_date, received_date)) 

van |> count(is.na(delivered_date_calc)) 

van <- van |>
  mutate(delivered_date_calc = coalesce(delivered_date, estimated_delivery_date)) 

van |> count(is.na(delivered_date_calc)) 

van <- van |> 
  mutate(delivered_year = as_factor(year(delivered_date_calc)))

van |> see_distinct(delivered_year)         

# check for nas in delivered_qty
van |> count(is.na(delivered_qty)) 

van <- van |>
  mutate(delivered_qty_calc = coalesce(delivered_qty, received_qty)) 
van |> count(is.na(delivered_qty_calc)) 

van <- van |>
  mutate(delivered_qty_calc = coalesce(delivered_qty_calc, shipped_qty)) 
van |> count(is.na(delivered_qty_calc)) 

# create method groups so oral contraceptives is one group

van <- van |> 
  mutate(method_group = case_when((l3_method == "Combined Oral Contraceptives"|
                                  l3_method == "Progestogen Only Pills")
                                  ~ "Oral Contraceptives",
                                  .default = l3_method))
                                  
    
van |> glimpse()

```

```{r Data Visualization set up}

dkt |> see_distinct(method_group)
van |> see_distinct(method_group)

```

## `r params$country` `r params$methodgroup`

::: columns
::: {.column width="50%"}
```{r GFPVAN : Data visualization}
#| output: true
#| fig-align: center

#generate_vancharts <- function(choose_country, choose_methodgroup){
  
  vanchart <- 
    ggplot(van |> 
         filter(country_name == params$country &
                method_group == params$methodgroup
                ),
       aes(x = delivered_year, 
           y = delivered_qty_calc,   # Note: delivered quantity in base_uom
           fill = funder_recipient)) + 
  
  geom_bar(position = "stack", stat = "identity") +
  
  scale_fill_brewer(palette = "YlGnBu") +
    
  labs(
    title = str_c("GFPVAN Data: Shipment of",
                  params$methodgroup,
                  "to", params$country, 
                  sep = " "),
    subtitle = ("Colors represent different Funder_Recipient combinations"),
    caption = str_c("Data source: Global Family Planning Visibility and Analytics Network (GFPVAN) \nNote that GFPVAN data is governed by the GFPVAN terms of use and is not for distribution external to USAID \n\nData last updated:",
                    van_importdate,
                   #"\nMethods included:",
                  #choose_methodgroup,
                    sep = " "),
    x = "year of delivery",
    y = "quantity delivered in cycles"
  ) +
  
  scale_y_continuous(labels = scales::label_number(scale_cut = scales::cut_short_scale())) +
  mytheme()
  
  ggsave(filename = str_c(params$country,"_",params$methodgroup,".png"),
         device = "png",
         plot = last_plot(),
         path = "C:\\Users\\akrishnamoorthy\\Documents\\Github\\OC\\plots\\GFPVAN")
  
#  return(vanchart)
 vanchart 
# }

# purrr::map2(country_params, methodgroup_params, generate_vancharts) 

```
:::

::: {.column width="50%"}
```{r DKT Data Visualization}
#| output: true
#| fig-align: center

dktchart <-
    ggplot(dkt |> 
           filter(  (country == params$country) 
                  & (method_group == params$methodgroup) 
                  ),
         aes(x = year, y = qty_delivered, fill = program)) +
    
    geom_bar(position = "stack", stat = "identity") +
    
    scale_fill_brewer(palette = "YlGnBu") +
  
    labs(
      title = str_c("DKT Data: SMO sales",
                    "of", params$methodgroup, "in",
                    params$country, 
                    sep = " "),
      caption = str_c("Data Source: DKT International Contraceptive Social Marketing Statistics\n(https://www.dktinternational.org/contraceptive-social-marketing-statistics/)\n\nData last updated:",
                      dkt_importdate,
                    #  "\nMethods included:",
                    #  params$methodgroup,
                      sep = " "),
      x = "year sold",
      y = "quantity sold in cycles"
    ) +
  
    scale_y_continuous(labels = scales::label_number(scale_cut = scales::cut_short_scale())) +
    mytheme()

   ggsave(filename = str_c(params$country,"_",params$methodgroup),
           device = "png",
           plot = last_plot(),
           path = "C:\\Users\\akrishnamoorthy\\Documents\\Github\\OC\\plots\\DKT")

dktchart

```
:::
:::

::: aside
The two charts are from different data sources and may represent overlapping/ duplicative data.
:::
