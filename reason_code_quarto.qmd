---
title: "GHSC-PSM TO3 Global Supply Chain"
subtitle: "Reason Code Analysis, February 2024"
author: ""
format: 
  dashboard:
    orientation: columns
editor: visual
params: 
  time_period: !expr c("2024-Q1")   
execute: 
  echo: false # dont include code , override in sections as needed.
  output: false # dont include output, override in sections as needed.
  warning: false # dont include warnings
---

```{r purpose_version_learning}
# Purpose: Analysis of the use of reason codes by GHSC-PSM TO3, particularly in FY2023 and FY2024Q1
# Version: Feb 2024  Build off the oc.qmd script
# old learning:
#   use slice to remove rows
#   use janitor row_to_names to get column names from a row
#   use janitor remove_empty to remove rows that have all NAs
#   use relocate
#   use fill
#   negating the condition for a filter
#   use RcolorBrewer for ggplots
#   setting the theme for a ggplot
#   use forcats functions to set/change factor levels
#   casting a variable as a factor in order to change order on a stacked bar plot
#   using rep
#   use across to perform operations across multiple columns
#   use \(x) instead of ~.
#   use if_all and a function/condition with filter
#   change case_when default to .default =
#   use count(is.na(variable)) to count number of nas

```

```{r initial_setup}

# time_period <- c("2023-Q1","2023-Q2","2023-Q3","2023-Q4")

# load packages ------------------------------------------------
pacman::p_load("tidyverse",
               "rio",      # for import/export
               "janitor",  # for data cleaning
               "here",     # for relative file paths
               "ggplot2",
               "RColorBrewer",
               "gt",
            #   "plotly",
               "ggiraph"
            )


# For exploring character or factor columns, it is useful to have a see_distinct function -------------------------------------------------------------
see_distinct <- function(df, var){
  df |> 
    distinct({{ var }}) |> 
    arrange({{ var }}) |> 
    pull()
}
```

```{r importdata_perfds}

pds_raw <- import(here("data/raw_data", "PerformanceDataset.xlsx"),
                  na = c("", " ","NA"),
                  )

importdate_pds <- "Feb 2024"

#TO DO check why using import results in "" not being read as NAs and warnings
```

```{r datawrangling_perfds}

pds_raw |> glimpse()

# clean names
pds <- pds_raw |> 
  janitor::clean_names() |> 
  glimpse()

# This dataset is for all taskorders and all status. 
# Filter/select to chose only rows of interest
pds <- pds |>
  filter(
    condom_adjusted_task_order == "TO3",
    (status_name   == "Shipment Delivered" |
     status_name == "Partially Delivered"
    ),
    order_type != "Replenishment Order",
    revised_agreed_delivery_date_fiscal_year %in% 
      c("2019","2020","2021","2022","2023","2024")
    #TODO modify by converting to lubridate and using from to
  ) 

#TODO data quality check of all fields

# Create a group for all non DRC countries
pds <- pds |> 
  mutate(country_group =
           case_when(country != "Congo DRC" ~ "All other countries",
                     .default = country)
         )

# check if country_group worked as expected
pds |> 
  distinct(country_group, country) |> 
  arrange(country_group, country)

# create OTD and reason code use buckets
pds <- pds |> 
  mutate(otd_reasoncode =
           case_when(on_time_otd == "N" 
                     ~ "Not on time",
                  #   (reason_code == "AD012" & on_time_otd == "Y") 
                  #   ~ "On time with AD012",
                     (str_starts(reason_code,"AD") & on_time_otd == "Y")
                     ~ "On time with reason code(s)",
                     (on_time_otd == "Y")
                     ~ "On time without reason code")
         )

# check OTD and reason code buckets work as expected
pds |> 
  distinct(otd_reasoncode,on_time_otd, reason_code) |> 
  arrange(otd_reasoncode,on_time_otd, reason_code) |> 
  gt()

# make otd_reasoncode a factor and set levels per order needed in display
pds |> 
  see_distinct(otd_reasoncode)

pds <- pds |>
  mutate(otd_reasoncode = factor(otd_reasoncode,
    levels = c(
      "Not on time",
      "On time without reason code",
  #    "On time with some other AD code",
      "On time with reason code(s)"
    )
  ))

levels(pds$otd_reasoncode)

# Calculate leadtime vs cycletime as the diff between latest actual delivery date 
# and agreed delivery date

pds <- pds |> 
  # convert all dates 
  mutate(across(.cols = where(is.POSIXct), .fns = as_date)) |> 
  mutate(lt_ct = latest_actual_delivery_date - agreed_delivery_date)

pds |> 
  select(lt_ct) |> 
  glimpse() 
# lt_ct is of type duration as it is the difference of two dates, convert it to numeric for easy plotting
  
pds <- pds |> 
  mutate(lt_ct = as.numeric(lt_ct,"days"))
```

```{r importdata_reasoncode}

# raw file has shipments for select countries for oral contraceptives
reasoncode_raw <- import(here("data/raw_data", "reasoncodes2023.xlsx"),
                  na = c("", " ","NA")
                  )

importdate_reasoncode <- "Feb 2024"

#TO DO check why using import results in "" not being read as NAs

```

```{r datawrangling_reasoncode}

reasoncode_raw |> glimpse()

# clean names
reasoncode <- reasoncode_raw |> 
  janitor::clean_names() |> 
  glimpse()

# rename current_indicator columns, there is one for PO and one for reason code
reasoncode <- reasoncode |>
  rename(# new = old
         current_indicator_PO = current_indicator_6,
         current_indicator_rcode = current_indicator_18)

# create ROPOline column
reasoncode <- reasoncode |>
  mutate(
    prime_line_number = as.character(prime_line_number),
    ropo_line = str_c(ro_number, 
                      po_do_io_number, 
                      prime_line_number)
         )
# select columns and rows of interest - 
# adding only the TO3 reason codes
# adding only non replenishment orders
# adding only AD codes
reasoncode <- reasoncode |>
  select(ro_number,
         task_order,
         po_do_io_number,
         current_indicator_PO,
         prime_line_number,
         reason_code_entry_date,
         reason_code,
         reason_code_comment,
         reason_code_duration,
         old_date,
         new_date,
         ropo_line
         ) |>
  filter(
    ro_number != "Replenishment Orders",
    task_order == "TO3",
    str_starts(reason_code,"AD")
    ) |> 
  glimpse()


```

```{r datawrangling_joindatasets}

pds_allcodes <- pds |> 
  left_join(reasoncode,
            by = join_by(ropo_line))

pds_allcodes |> 
  glimpse()
# check if the join worked as expected, grouping by ropo_line should give the same number of lines as pds
n_distinct(pds_allcodes$ropo_line)
n_distinct(pds$ropo_line)

# group by ropo_line and for each group-
# create a variable that reads Y if AD012 is one of the codes
```

```{r dataviz_setup}

# Setting the theme for visualization -------------------------------------------------------------

color_title <- "#202020" #  "#202020"
color_caption <- "#909090"  # "#000000"
color_plot_text <- color_plot_text <- "#505050" # "#000000"
      
line <- 10
    
mytheme <- function() {
      theme_classic() +
        theme(plot.title = element_text(size = 14,
                                        color = color_title,
                                        face = "bold",
                                        margin = margin(b = line),
                                        hjust = 0),
              
              plot.title.position = "plot", #Move plot.title to the left
              
              plot.subtitle = element_text(size = 12,
                                           face = "bold",
                                           color = color_plot_text,
                                           hjust = 0), 
              
              plot.caption = element_text(size = 10,
                                          color = color_caption,
                                          face = "italic",
                                          margin = margin(t = line),
                                          hjust = 0, # left-align caption
                                          vjust = 2),
              
              plot.caption.position = "plot",
              
              plot.margin = ggplot2::margin(15, 15, 10, 15), #top, right, bottom, left
              
              axis.title = element_text(size = 12, # adjusts both axes titles
                                        color = color_caption,
                                        vjust = 2),          
              axis.text.x = element_text(size = 10,
                                      #   angle = 60, 
                                      #   hjust = 1,
                                         color = color_plot_text),
              axis.text.y = element_text(size = 10,
                                         color = color_plot_text),
              
              # axis.ticks = element_blank(),
              
              # axis.line = element_blank(),
              
              legend.position = "right",
              legend.title = element_blank(),
              legend.text = element_text(size = 10,
                                         color = color_plot_text)
              
              # text =  element_text(color = color_plot_text,
              # this will change all text size (except geom_text)
              #                          size = 14,
              #                          hjust = 0.5)
        )
      
}

# other data viz setup

# calculating percent with reason codes
percent_reasoncode <- 
round(
  (pds |> 
    filter(revised_agreed_delivery_date_fiscal_quarter_year %in% params$time_period,
           otd_reasoncode %in% "On time with reason code(s)") |> 
    count() |> 
  pull()
  )/
  (pds |> 
    filter(revised_agreed_delivery_date_fiscal_quarter_year %in% params$time_period)|> 
    count() |> 
    pull()
  ), 2)*100


# calculating percent too early
# note calculating 5weeks as it is OTD window + 1 bin to the left
# TODO this needs to be with pds_all_codes to count instances where some other code is applied after AD012

percent_tooearly <- 
  count_A012_earlier_than_otd <- 
    pds |> 
      filter(revised_agreed_delivery_date_fiscal_quarter_year %in% params$time_period)|>       
      filter(lt_ct/7 < -5 ,
             reason_code == "AD012",
             otd_reasoncode == "On time with reason code(s)") |> 
      count(otd_reasoncode) |> 
      pull(n)
  
  count__all <-  pds |>
      filter(revised_agreed_delivery_date_fiscal_quarter_year %in% params$time_period)|>
      count() |> 
      pull(n)
  
  percent_A012_earlier_than_otd <- round((count_A012_earlier_than_otd / count__all)*100,0)


percent_reasoncode
percent_tooearly


```

# Trend in the use of codes 

```{r dataviz_perfds1}
#| output: true


# can use stat=count in geom_bar (with pds and no y in aes) to get a percent stacked chart, however in order to get the percentages to use in text, we need to calculate them first and then use stat= identity iwth a y in aes.

pds_grouped <- pds |> 
  group_by(revised_agreed_delivery_date_fiscal_quarter_year, otd_reasoncode) |> 
  dplyr::tally() |> 
  dplyr::mutate(percent= round(n/sum(n),2)) 
# doing a count instead of group_by/tally will not change n but will change sum(n)-- with a count sum(n) is sum of n across all groups, with group_by/tally sum(n) is sum of n in the immediate higher group

gg_pds_grouped <- 
pds_grouped |> 
   ggplot(aes(x = revised_agreed_delivery_date_fiscal_quarter_year,
             y = n,
             fill = otd_reasoncode)) +
  geom_bar_interactive(aes(tooltip = (percent*100)), # tooltip for ggiraph
                       stat = "identity",
                       position = "fill") +
  scale_fill_brewer(palette = "YlGnBu") +
  labs(
    title = str_c("In ", 
                  params$time_period,
                  ", ", 
                  percent_reasoncode,
                  "% of orders had a reason code applied"),
    subtitle = (""),
    caption = str_c("Data source: GHSC-PSM Artmis\nData last updated:",
                    importdate_pds,
                    sep = " "),
    x = "Revised agreed delivery date",
    y = "% of order line items "
  ) +
  mytheme() +
  theme(axis.text.x = element_text(hjust = 1,
                                   angle = 60))+
  scale_y_continuous(labels = scales::percent) +
  geom_text(aes(label = ifelse(revised_agreed_delivery_date_fiscal_quarter_year %in% params$time_period,
                               str_c(percent*100,"%"),
                               "")),
            position = position_fill(vjust=0.5),
            colour="white", 
            size = 3)

girafe(
  ggobj = gg_pds_grouped,
  options = list(opts_sizing(rescale = FALSE),
                 opts_tooltip(zindex = 9999),
                 opts_hover(css = ''),
                 opts_hover_inv(css = 'opacity:0.2;'))
#  width_svg = 24,
#  height_svg = 20
  )

```
# Reason code distribution

##  {.sidebar}


|             |                        |
|-------------|------------------------|
| **AD012**   | Early delivery         |
| **AD010**   | USAID authorized change|
| **AD011**   | USAID requested delay  |
| **AD030**   | Recall/quality related |
| **AD070**   | Security incident      |
| **AD998**   | Data cleaning          |
| **AD999**   | Other acceptable delay |

## column   

```{r dataviz_reasoncode_distribution}
#| output: true

pds_allcodes |> 
  filter(
    current_indicator_PO == "A",
    revised_agreed_delivery_date_fiscal_quarter_year %in% params$time_period,
    str_starts(reason_code.y,"AD")) |> 
  ggplot(aes(x = fct_infreq(reason_code.y))) +
  geom_bar()+
  
  scale_fill_brewer(palette = "YlGnBu") +
  labs(
    title = str_c("In ", 
                  params$time_period,
                  ", ", 
                  "the most applied reason code is AD012, followed by AD030"),
    caption = str_c("Data source: GHSC-PSM Artmis\nData last updated:",
                    importdate_pds,
                    sep = " "),
    x = "",
    y = "Number of order line items with code"
  ) +
  mytheme()
```

# How early are early orders

```{r dataviz_perfds2_indays}
#| eval: false
#| output: true

pds |> 
  filter(revised_agreed_delivery_date_fiscal_quarter_year == params$time_period) |> 
  ggplot(aes(lt_ct, fill = otd_reasoncode)) + 

  # center bin needs to be -14 to 7, so binwidth is 22 and -3.5 is the center of one of the bins
   geom_histogram(binwidth = 22,
                 center = -3.5) + 
  # -234 and 227 are 10 bins on either side of the OTD window
  scale_x_continuous(breaks = seq(-234 , 227 ,by = 22))+ 
  # Add vertical lines for the OTD window
  geom_vline(aes(xintercept = 7),
             linetype = "dashed", linewidth = 0.5) +
  geom_vline(aes(xintercept = -14),
             linetype = "dashed", linewidth = 0.5) +
  scale_fill_brewer(palette = "YlGnBu") +
  labs(
     title = str_c("In ", 
                   params$time_period, 
                   ", ",
                   percent_tooearly,
                   "% of orders were delivered more than 5 weeks ahead of agreed delivery date"),
 #   subtitle = (""),
    caption = str_c("Data source: GHSC-PSM Artmis\nData last updated:",
                    importdate_pds,
                    sep = " "),
    x = "Difference between Actual delivery date and Agreed delivery date in days",
    y = "Number of order line items "
  ) +
  mytheme() +
  theme(axis.text.x = element_text(hjust = 1,
                                   angle = 60))
```

```{r dataviz_perfds2_inweeks}
#| output: true

#TODO add geom text to show less than 5 weeks
pds |> 
  filter(revised_agreed_delivery_date_fiscal_quarter_year == params$time_period) |> 
  ggplot(aes(lt_ct/7, fill = otd_reasoncode)) + 
  
  geom_histogram(binwidth = 3, # OTD window is 3 weeks
                 center = -0.5) + # center of one of the bins
  scale_x_continuous(breaks = seq(-32 , 31 ,by = 3))+ # -32 and 31 are 10 bins on either side of the OTD window
  # Add vertical lines for the OTD window
  geom_vline(aes(xintercept = 1),
             linetype = "dashed", linewidth = 0.5) +
  geom_vline(aes(xintercept = -2),
             linetype = "dashed", linewidth = 0.5) +
  scale_fill_brewer(palette = "YlGnBu") +
  labs(
     title = str_c("In ", 
                   params$time_period, 
                   ", ",
                   percent_tooearly,
                   "% of orders were delivered more than 5 weeks ahead of ADD"),
 #   subtitle = (""),
    caption = str_c("Data source: GHSC-PSM Artmis\nData last updated:",
                    importdate_pds,
                    sep = " "),
    x = "Difference between Actual delivery date and Agreed delivery date in weeks",
    y = "Number of order line items "
  ) +
  mytheme()
#+
#  theme(axis.text.x = element_text(hjust = 1,
#                                   angle = 60))
```

```{r dataviz_perfds2_inweeks_drc}
#| eval: false
# repeat above chart for DRC
# TODO % in title needs to change 
pds |> 
  filter(country_group == "Congo DRC") |> 
  filter(revised_agreed_delivery_date_fiscal_quarter_year == params$time_period) |> 
  ggplot(aes(lt_ct/7, fill = otd_reasoncode)) + 
  
  geom_histogram(binwidth = 3, # OTD window is 3 weeks
                 center = -0.5) + # center of one of the bins
  scale_x_continuous(breaks = seq(-32 , 31 ,by = 3))+ # -32 and 31 are 10 bins on either side of the OTD window
  # Add vertical lines for the OTD window
  geom_vline(aes(xintercept = 1),
             linetype = "dashed", linewidth = 0.5) +
  geom_vline(aes(xintercept = -2),
             linetype = "dashed", linewidth = 0.5) +
  scale_fill_brewer(palette = "YlGnBu") +
  labs(
     title = str_c("In ", 
                   params$time_period, 
                   ", ",
                   percent_tooearly,
                   "% of orders were delivered more than 5 weeks ahead of agreed delivery date"),
 #   subtitle = (""),
    caption = str_c("Data source: GHSC-PSM Artmis\nData last updated:",
                    importdate_pds,
                    sep = " "),
    x = "Difference between Actual delivery date and Agreed delivery date in weeks",
    y = "Number of order line items "
  ) +
  mytheme()

#Repeat chart for non DRC
# TODO % in title needs to change 
pds |> 
  filter(country_group == "All other countries") |> 
  filter(revised_agreed_delivery_date_fiscal_quarter_year == params$time_period) |> 
  ggplot(aes(lt_ct/7, fill = otd_reasoncode)) + 
  
  geom_histogram(binwidth = 3, # OTD window is 3 weeks
                 center = -0.5) + # center of one of the bins
  scale_x_continuous(breaks = seq(-32 , 31 ,by = 3))+ # -32 and 31 are 10 bins on either side of the OTD window
  # Add vertical lines for the OTD window
  geom_vline(aes(xintercept = 1),
             linetype = "dashed", linewidth = 0.5) +
  geom_vline(aes(xintercept = -2),
             linetype = "dashed", linewidth = 0.5) +
  scale_fill_brewer(palette = "YlGnBu") +
  labs(
     title = str_c("In ", 
                   params$time_period, 
                   ", ",
                   percent_tooearly,
                   "% of orders were delivered more than 5 weeks ahead of agreed delivery date"),
 #   subtitle = (""),
    caption = str_c("Data source: GHSC-PSM Artmis\nData last updated:",
                    importdate_pds,
                    sep = " "),
    x = "Difference between Actual delivery date and Agreed delivery date in weeks",
    y = "Number of order line items "
  ) +
  mytheme()

  
```

# Other reason codes

```{r dataviz_othercodes}
#| output: true
# Details of codes other than AD012
pds_allcodes |> 
  filter(
    current_indicator_PO == "A",
    revised_agreed_delivery_date_fiscal_quarter_year %in% params$time_period,
    reason_code.y != "AD012",
    str_starts(reason_code.y,"AD")) |> 
  select(reason_code.y, 
         country,
         brand_name,
         po_do_io_number.x,
         reason_code_comment) |> 
  arrange(reason_code.y, country, brand_name) |> 
  gt(groupname_col = 'reason_code.y', rowname_col = 'country') |> 
  tab_header(
    title = 'Details of reason codes other than AD012',
    subtitle = str_c('Data is for revised agreed delivery date in ', params$time_period)
    ) |> 
    cols_label(
      reason_code.y = 'reason code',
      brand_name = "brand name",
      po_do_io_number.x = "PO DO IO number",
      reason_code_comment = "reason code comment"
    )|> 
    sub_missing(missing_text = '-')|> 
    opt_stylize(style = 6, color = 'blue')


```

# Is a reason code always used?

```{r reason_code_check}
#| output: true

pds |> 
  filter(!str_starts(reason_code,"AD"),
         revised_agreed_delivery_date != agreed_delivery_date) |> 
  select(
    agreed_delivery_date,
    revised_agreed_delivery_date,
    latest_actual_delivery_date,
    reason_code,
    reason_text,
    country,
    brand_name,
    ropo_line
  ) |> 
  arrange(desc(agreed_delivery_date),
          desc(revised_agreed_delivery_date),
          desc(latest_actual_delivery_date) ) |> 
  gt() |> 
  tab_header(
    title = 'Orders with revised ADD different from ADD but missing AD code'
    ) |> 
   cols_label(
    agreed_delivery_date = "ADD",
    revised_agreed_delivery_date = "revised ADD",
    latest_actual_delivery_date = "actual delivery date",
    reason_code = "reason code",
    reason_text = "reason text",
    ropo_line = "RO PO Line number"
    )|> 
    sub_missing(missing_text = '-')|> 
    opt_stylize(style = 6, color = 'blue')

    
```

# What do RDDs look like?

## Column

```{r rdd_distribution}
#| output: true

# rdd-oed
pds |> 
  filter(revised_agreed_delivery_date_fiscal_quarter_year %in% params$time_period) |> 
  ggplot(aes(as.numeric(requested_delivery_date - order_entry_date)/30 )) +
#  geom_histogram(binwidth = 1,
#                 color = "#000000") +
  geom_bar()+
  scale_x_binned(breaks = seq(0,20,by = 2),
                 limits = c(0, 20))+
  scale_fill_brewer(palette = "YlGnBu") +
  labs(
    title = "Distribution of RDD - OED in months",
    subtitle = str_c("for orders with revised ADD in ",(params$time_period)),
    caption = str_c("Data source: GHSC-PSM Artmis\nData last updated:",
                    importdate_pds,
                    sep = " "),
    x = "",
    y = ""
  ) +
  mytheme()
```

## Column

```{r rdd_add comparison}
#| output: true
# add-rdd vs rdd-oed

gg_rdd <-
pds |> 
  filter(revised_agreed_delivery_date_fiscal_quarter_year %in% params$time_period) |> 
  ggplot(aes(x = as.numeric(requested_delivery_date - order_entry_date)/30,
             y = as.numeric(agreed_delivery_date - requested_delivery_date)/30,
             color = fulfillment_method )) +

  geom_point_interactive(aes(tooltip = str_c(country," ", brand_name)), 
                         # tooltip for ggiraph
                         size = 3)+
  scale_x_continuous(breaks = seq(0,20, by = 2),
                    limits = c(0, 20)) +
  scale_y_continuous(breaks = seq(0,20, by = 2),
                    limits = c(0, 20)) +
#  coord_equal(ratio = 1) +
  scale_fill_brewer(palette = "YlGnBu") +
  labs(
    title = "",
    subtitle = (params$time_period),
    caption = str_c("Data source: GHSC-PSM Artmis\nData last updated:",
                    importdate_pds,
                    sep = " "),
    x = "RDD - OED in months",
    y = "ADD - RDD in months"
  ) +
  mytheme() 

girafe(
  ggobj = gg_rdd,
  
  options = list(opts_sizing(rescale = FALSE),
                 opts_tooltip(zindex = 9999),
                 opts_hover(css = ''),
                 opts_hover_inv(css = 'opacity:0.2;')
                 )
  )

# TODO tabsets for All/DRC/Non DRC for all pages
```
