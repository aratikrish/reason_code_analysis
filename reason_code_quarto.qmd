---
title: "GHSC-PSM TO3 Global Supply Chain reason code analysis"
subtitle: "February 2024"
author: "Arati Krishnamoorthy, GH/PRH/CSL"
format: html
editor: visual
execute: 
  echo: false # dont include code , override in sections as needed.
  output: false # dont include output, override in sections as needed.
  warning: false # dont include warnings
---

```{r purpose_version_learning}
# Purpose: Analysis of the use of reason codes by GHSC-PSM TO3, particularly in FY2023 and FY2024Q1
# Version: Feb 2024  Build off the oc.qmd script
# old learning:
#   use slice to remove rows
#   use janitor row_to_names to get column names from a row
#   use janitor remove_empty to remove rows that have all NAs
#   use relocate
#   use fill
#   negating the condition for a filter
#   use RcolorBrewer for ggplots
#   setting the theme for a ggplot
#   use forcats functions to set/change factor levels
#   casting a variable as a factor in order to change order on a stacked bar plot
#   using rep
#   use across to perform operations across multiple columns
#   use \(x) instead of ~.
#   use if_all and a function/condition with filter
#   change case_when default to .default =
#   use count(is.na(variable)) to count number of nas

```

```{r initial_setup}

# load packages ------------------------------------------------
pacman::p_load("tidyverse",
               "rio",      # for import/export
               "janitor",  # for data cleaning
               "here",     # for relative file paths
               "ggplot2",
               "RColorBrewer"
            )


# For exploring character or factor columns, it is useful to have a see_distinct function -------------------------------------------------------------
see_distinct <- function(df, var){
  df |> 
    distinct({{ var }}) |> 
    arrange({{ var }}) |> 
    pull()
}
```

```{r importdata_perfds}

pds_raw <- import(here("data/raw_data", "PerformanceDataset.xlsx"),
                  na = c("", " ","NA"),
                  )

importdate_pds <- "Feb 2024"

#TO DO check why using import results in "" not being read as NAs and warnings
```

```{r datawrangling_perfds}

pds_raw |> glimpse()

# clean names
pds <- pds_raw |> 
  janitor::clean_names() |> 
  glimpse()

# This dataset is for all taskorders and all status. 
# Filter/select to chose only rows of interest
pds <- pds |>
  filter(
    condom_adjusted_task_order == "TO3",
    (status_name   == "Shipment Delivered" |
     status_name == "Partially Delivered"
    ),
    order_type != "Replenishment Order",
    revised_agreed_delivery_date_fiscal_year %in% 
      c("2019","2020","2021","2022","2023","2024")
    #TODO modify by converting to lubridate and using from to
  ) 

#TODO data quality check of all fields

# Create a group for all non DRC countries
pds <- pds |> 
  mutate(country_group =
           case_when(country != "Congo DRC" ~ "All other countries",
                     .default = country)
         )

# check if country_group worked as expected
pds |> 
  distinct(country_group, country) |> 
  arrange(country_group, country)

# create OTD and reason code use buckets
pds <- pds |> 
  mutate(otd_reasoncode =
           case_when(on_time_otd == "N" 
                     ~ "Not on time",
                     (reason_code == "AD012" & on_time_otd == "Y") 
                     ~ "On time with AD012",
                     (str_starts(reason_code,"AD") & on_time_otd == "Y")
                     ~ "On time with some other AD code",
                     (on_time_otd == "Y")
                     ~ "On time without reason codes")
         )

# check OTD and reason code buckets work as expected
pds |> 
  distinct(otd_reasoncode,on_time_otd, reason_code) |> 
  arrange(otd_reasoncode,on_time_otd, reason_code)

# make otd_reasoncode a factor and set levels per order needed in display
pds |> 
  see_distinct(otd_reasoncode)

pds <- pds |>
  mutate(otd_reasoncode = factor(otd_reasoncode,
    levels = c(
      "Not on time",
      "On time without reason codes",
      "On time with some other AD code",
      "On time with AD012"
    )
  ))

levels(pds$otd_reasoncode)

# Calculate leadtime vs cycletime as the diff between latest actual delivery date 
# and agreed delivery date

pds <- pds |> 
  # convert all dates 
  mutate(across(.cols = where(is.POSIXct), .fns = as_date)) |> 
  mutate(lt_ct = latest_actual_delivery_date - agreed_delivery_date)

pds |> 
  select(lt_ct) |> 
  glimpse()
```

```{r importdata_reasoncode}

# raw file has shipments for select countries for oral contraceptives
reasoncode_raw <- import(here("data/raw_data", "reasoncodes2023.xlsx"),
                  na = c("", " ","NA")
                  )

importdate_reasoncode <- "Feb 2024"

#TO DO check why using import results in "" not being read as NAs

```

```{r datawrangling_reasoncode}

reasoncode_raw |> glimpse()

# clean names
reasoncode <- reasoncode_raw |> 
  janitor::clean_names() |> 
  glimpse()

# rename current_indicator columns, there is one for PO and one for reason code
reasoncode <- reasoncode |>
  rename(# new = old
         current_indicator_PO = current_indicator_6,
         current_indicator_rcode = current_indicator_18)

# create ROPOline column
reasoncode <- reasoncode |>
  mutate(
    prime_line_number = as.character(prime_line_number),
    ropo_line = str_c(ro_number, 
                           po_do_io_number, 
                           prime_line_number)
         )
# select columns and rows of interest - 
# adding only the TO3 reason codes
# adding only non replenishment orders
# adding only AD codes
reasoncode <- reasoncode |>
  select(ro_number,
         task_order,
         po_do_io_number,
         current_indicator_PO,
         prime_line_number,
         reason_code_entry_date,
         reason_code,
         reason_code_comment,
         reason_code_duration,
         old_date,
         new_date,
         ropo_line
         ) |>
  filter(
    ro_number != "Replenishment Orders",
    task_order == "TO3",
    str_starts(reason_code,"AD")
    ) |> 
  glimpse()


```

```{r datawrangling_joindatasets}

pds_allcodes <- pds |> 
  left_join(reasoncode,
            by = join_by(ropo_line))

pds_allcodes |> 
  glimpse()
# check if the join worked as expected, grouping by ropo_line should give the same number of lines as pds
n_distinct(pds_allcodes$ropo_line)
n_distinct(pds$ropo_line)

# group by ropo_line and for each group-
# create a variable that reads Y if AD012 is one of the codes
```

```{r dataviz_setup}

# Setting the theme for visualization -------------------------------------------------------------

color_title <- "#202020" #  "#000000"
color_caption <- "#909090"  # "#000000"
color_plot_text <- color_plot_text <- "#505050" # "#000000"
      
line <- 10
    
mytheme <- function() {
      theme_classic() +
        theme(plot.title = element_text(size = 20,
                                        color = color_title,
                                        face = "bold",
                                        margin = margin(b = line),
                                        hjust = 0),
              
              plot.title.position = "plot", #Move plot.title to the left
              
              plot.subtitle = element_text(size = 14,
                                           face = "italic",
                                           color = color_plot_text,
                                           hjust = 0), 
              
              plot.caption = element_text(size = 16,
                                          color = color_caption,
                                          face = "italic",
                                          margin = margin(t = line),
                                          hjust = 0, # left-align caption
                                          vjust = 1),
              
              plot.caption.position = "plot",
              
              plot.margin = ggplot2::margin(15, 15, 10, 15), #top, right, bottom, left
              
              axis.title = element_text(size = 16, # adjusts both axes titles
                                        color = color_plot_text),          
              axis.text.x = element_text(size = 12,
                                         angle = 60, 
                                         hjust = 1,
                                         color = color_plot_text),
              axis.text.y = element_text(size = 14,
                                         color = color_plot_text),
              
              axis.ticks = element_blank(),
              
              # axis.line = element_blank(),
              
              legend.position = "right",
              legend.title = element_blank(),
              legend.text = element_text(size = 14,
                                         color = color_plot_text)
              
              # text =  element_text(color = color_plot_text,
              # this will change all text size (except geom_text)
              #                          size = 14,
              #                          hjust = 0.5)
        )
      
}

# other data viz setup


```

Percentage of orders where a reason code is applied

```{r dataviz_perfds1}
#| output: true

pds |> 
  ggplot(aes(revised_agreed_delivery_date_fiscal_quarter_year,
             fill = otd_reasoncode)) +
  geom_bar(stat = "count",
           position = "fill") +
  scale_fill_brewer(palette = "YlGnBu") +
  labs(
    title = "Trend in the use of reason codes",
    subtitle = (""),
    caption = str_c("Data source: GHSC-PSM Artmis\n\nData last updated:",
                    importdate_pds,
                    sep = " "),
    x = "Revised agreed delivery date",
    y = "% of order line items "
  ) 
  mytheme()
  

```

For <Condom Adjusted Task Order> = TO3 : In <Revised Agreed Delivery Date Fiscal Quarter Year> = FY2024Q1 How early are orders that have AD012 applied ?
#TODO check if bins include end points
#TODO calculate how many orders are more than four weeks early

```{r dataviz_perfds2}
#| output: true

pds |> 
  filter(revised_agreed_delivery_date_fiscal_quarter_year == "2024-Q1") |> 
  ggplot(aes(lt_ct ,
             fill = otd_reasoncode)) +
  geom_histogram(binwidth = 7) +
  scale_fill_brewer(palette = "YlGnBu") +
  labs(
 #   title = "Trend in the use of reason codes",
 #   subtitle = (""),
    caption = str_c("Data source: GHSC-PSM Artmis\n\nData last updated:",
                    importdate_pds,
                    sep = " "),
    x = "Difference between Actual delivery date and Agreed delivery date",
    y = "Number of order line items "
  ) 
  mytheme()
  

```